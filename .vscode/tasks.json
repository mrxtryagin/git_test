{
    // See https://go.microsoft.com/fwlink/?LinkId=733558 
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "type": "process", // process是vsc把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍
            "label": "Compile", // 任务名称，与launch.json的preLaunchTask相对应
            //"command": "E:\\Qt\\Qt5.14.1\\Tools\\mingw730_64\\bin\\gcc.exe",// 要使用的编译器，C++用g++
            "command":"C:\\Program Files\\LLVM\\bin\\clang.exe",//如果使用Clang编写C语言，把command的值改成clang。
            "args": [
                "-g",// 生成和调试有关的信息
                "${file}",
                "-o",// 指定输出文件名，不加该参数则默认输出a.exe
                "${fileDirname}/${fileBasenameNoExtension}.exe",
                "-Wall",    // 开启额外警告
                "-static-libgcc",   // 静态链接
                //如果使用MinGW，编译C用gcc，编译c++用g++，并把-target和-fcolor那两条删去。如果不想要额外警告，把-Wall那一条删去。
                "-fcolor-diagnostics",
                "--target=x86_64-w64-mingw", // 默认target为msvc，不加这一条就会找不到头文件
                "-std=c11",// C语言最新标准为c11，或根据自己的需要进行修改
                //"-std=c++17",       // 使用c++17标准,c不需要
                //"-finput-charset=UTF-8",    //输入编译器文本编码 默认为UTF-8
                //"-fexec-charset=GBk",   //输出exe文件的编码,clang只指出utf-8的
            ],
            "group": {
                "kind": "build",
                "isDefault": true // 设为false可做到一个tasks.json配置多个编译指令，需要自己修改本文件，我这里不多提
            },
            // "problemMatcher": [
            //     "$gcc"// 此选项可以捕捉编译时终端里的报错信息；但因为有Lint，再开这个可能有双重报错
            // ],// 如果你不使用clang，去掉前面的注释符，并在上一条之后加个逗号。（也可以把这行删去)
            "presentation": {
                "echo": true,
                "reveal": "always", // 在“终端”中显示编译信息的策略，可以为always，silent，never
                 "focus": false,// 设为true后可以使执行task时焦点聚集在终端，但对编译c和c++来说，设为true没有意义
                 "panel": "shared" // 不同的文件的编译信息共享一个终端面板
            },
        }
    ]
}
